
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates an animation scenario (script) in Turkish based on a given text summary,
 * including a scene description and a key topic for each frame.
 *
 * - generateAnimationScenario - A function that generates the animation scenario in Turkish.
 * - GenerateAnimationScenarioInput - The input type for the generateAnimationScenario function.
 * - GenerateAnimationScenarioOutput - The return type for the generateAnimationScenario function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateAnimationScenarioInputSchema = z.object({
  pdfSummary: z
    .string()
    .describe('A summary of the PDF content (in Turkish) to generate the animation scenario from.'),
});

export type GenerateAnimationScenarioInput = z.infer<
  typeof GenerateAnimationScenarioInputSchema
>;

const AnimationFrameSchema = z.object({
  sceneDescription: z.string().describe('Sahnenin Türkçe dilinde detaylı açıklaması. Görsel öğeler, karakter eylemleri (varsa) ve o sahne için önemli mesajlar veya anlatım içermelidir.'),
  keyTopic: z.string().describe('Bu sahnenin Türkçe dilindeki anahtar konusu; kısa, öz ve etkili olmalıdır.')
});

const GenerateAnimationScenarioOutputSchema = z.object({
  frames: z.array(AnimationFrameSchema).describe('Animasyon karelerinin bir dizisi. Her kare bir sahne açıklaması ve bir anahtar konu içerir, tamamı Türkçe olmalıdır.')
});

export type GenerateAnimationScenarioOutput = z.infer<
  typeof GenerateAnimationScenarioOutputSchema
>;

export async function generateAnimationScenario(
  input: GenerateAnimationScenarioInput
): Promise<GenerateAnimationScenarioOutput> {
  return generateAnimationScenarioFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateAnimationScenarioPrompt',
  input: {schema: GenerateAnimationScenarioInputSchema},
  output: {schema: GenerateAnimationScenarioOutputSchema},
  prompt: `You are an expert scenario writer for animated videos. Your task is to create a structured animation script IN TURKISH based on the provided PDF summary (also in Turkish).
The output MUST be a JSON array of objects. Each object in the array represents a single animation frame and MUST contain two string properties:
1.  'sceneDescription': A detailed description of the scene in Turkish. This should provide enough detail for an animator to visualize and create the scene, including visual elements, character actions (if any), and key messages or narration for that scene.
2.  'keyTopic': A concise and impactful key topic or main takeaway for that specific scene, also in Turkish. This will be displayed prominently with the frame.

Example of the required JSON output format (in Turkish):
[
  {
    "sceneDescription": "Sahne 1: Kalabalık bir şehir caddesinin geniş açılı çekimi. Arabalar hareket ediyor, insanlar yürüyor. Anlatıcı: 'Dünya sürekli değişiyor...'",
    "keyTopic": "Sürekli Değişim ve Hareket"
  },
  {
    "sceneDescription": "Sahne 2: Bir mikroskoba bakan bir bilim insanının yakın çekimi. Bilim İnsanı (V.O.): 'Ve bu değişimin merkezinde yenilik var.'",
    "keyTopic": "Yeniliğin Merkezi Rolü"
  },
  {
    "sceneDescription": "Sahne 3: Parlak bir ampulün yavaşça aydınlanması, fikir ve buluşu simgeliyor. Anlatıcı: 'Her fikir, bir ışık yakar.'",
    "keyTopic": "Fikirlerin Aydınlatıcı Gücü"
  }
]

Now, based on the following summary (in Turkish), generate the animation scenario as a JSON array IN TURKISH, strictly following the format described above:

Summary (Özet):
{{{pdfSummary}}}

Animation Scenario (JSON Array - follow the formatting instructions precisely and ensure output is in Turkish):
`,
});

const generateAnimationScenarioFlow = ai.defineFlow(
  {
    name: 'generateAnimationScenarioFlow',
    inputSchema: GenerateAnimationScenarioInputSchema,
    outputSchema: GenerateAnimationScenarioOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output || !output.frames) {
      throw new Error("Scenario generation did not produce valid frame data.");
    }
    return output;
  }
);

