// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates an animation scenario (script) in Turkish based on a given text summary,
 * including a scene description (with metaphors), a key topic, and a short frame summary for each frame.
 *
 * - generateAnimationScenario - A function that generates the animation scenario in Turkish.
 * - GenerateAnimationScenarioInput - The input type for the generateAnimationScenario function.
 * - GenerateAnimationScenarioOutput - The return type for the generateAnimationScenario function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

import { QAPair } from './generate-qa-flow';

const GenerateAnimationScenarioInputSchema = z.object({
  pdfSummary: z
    .string()
    .describe('A summary of the PDF content (in Turkish) to generate the animation scenario from.'),
  qaPairs: z.array(z.any()).describe('An array of Q&A pairs to use for generating the scenario.'),
});

export type GenerateAnimationScenarioInput = z.infer<
  typeof GenerateAnimationScenarioInputSchema
>;

const AnimationFrameSchema = z.object({
  sceneDescription: z.string().describe('Sahnenin Türkçe dilinde detaylı açıklaması. MUTLAKA EDİTİM DİYAGRAMI tarzında somutlaştırma ve metaforlar kullanın. Hukuki/teknik kavramları görsel sembollerle açıklayın: mülkiyet=ev simgesi, taraflar=renkli daireler, süreçler=ok bağlantıları, bölüşüm=dallanma, anlaşma=puzzle parçaları. Geometrik şekiller, çizgiler ve simgelerle eğitici diyagram tarzında betimleyin.'),
  keyTopic: z.string().describe('Bu sahnenin içeriğini açıklayan, eğitici ve özetleyici bir metin. Bu metin, ilgili quiz sorusunun açıklamasından alınmalıdır.'),
  frameSummary: z.string().describe('Bu sahnenin ana mesajını ve içeriğini kullanıcıya doğrudan anlatan, en az 3-4 cümlelik, detaylı ve eğitici bir metin. Bu metin, karmaşık konuları basitleştirerek herkesin anlayabileceği bir dilde açıklamalıdır. Örneğin: "İzale-i şuyu, birden fazla kişinin sahip olduğu bir malın (örneğin bir arsa veya bina) mahkeme kararıyla satılarak veya bölünerek ortaklığın sonlandırılmasıdır. Bu dava, ortaklar arasında anlaşma sağlanamadığında mülkiyetin netleştirilmesi için önemli bir hukuki yoldur."')
});

const GenerateAnimationScenarioOutputSchema = z.object({
  frames: z.array(AnimationFrameSchema).describe('Animasyon karelerinin bir dizisi. Her kare bir sahne açıklaması, bir anahtar konu ve bir kare özeti içerir, tamamı Türkçe olmalıdır.')
});

export type GenerateAnimationScenarioOutput = z.infer<
  typeof GenerateAnimationScenarioOutputSchema
>;

export async function generateAnimationScenario(
  input: GenerateAnimationScenarioInput
): Promise<GenerateAnimationScenarioOutput> {
  return generateAnimationScenarioFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateAnimationScenarioPrompt',
  input: {schema: GenerateAnimationScenarioInputSchema},
  output: {schema: GenerateAnimationScenarioOutputSchema},
  prompt: `You are an expert scenario writer for animated educational videos. Your task is to create a structured animation script IN TURKISH based on the provided PDF summary and Q&A pairs.

IMPORTANT GOAL ➜ For each Q&A pair provided, create exactly ONE animation frame. The number of frames must match the number of Q&A pairs.

Each frame object MUST contain ONLY these fields:
- sceneDescription: A detailed scene description in Turkish. It MUST use personification and metaphors (at least 2) to visualize the concept from the quiz question. Use an educational diagram style to explain abstract concepts.
- keyTopic: This will be populated later, you can leave it empty.
- frameSummary: A detailed and educational text of at least 3-4 sentences that directly explains the main message and content of the scene to the user. It should simplify complex topics for everyone to understand. Use the question and its explanation to generate this summary.

Abstract concepts should be personified in an EDUCATIONAL DIAGRAM style. Use these metaphors as a REFERENCE:
- Property/Ownership → house icon, building icon
- Legal processes → connected flowcharts, step-by-step diagrams
- Parties/People → colored circles or simple human figures
- Relationships → connecting lines, arrows, bridges
- Distribution/Sharing → dividing objects, branching paths
- Agreements → handshake symbols, joining puzzle pieces
- Time/Process → sequential steps, numbered stages
- Rights/Obligations → balanced scales, equal parts

OUTPUT FORMAT ➜ ONLY a JSON array. Do not add any other text.

PDF Summary: {{{pdfSummary}}}
Quiz Questions and Explanations: {{{qaPairs}}}

JSON:`,
});

const generateAnimationScenarioFlow = ai.defineFlow(
  {
    name: 'generateAnimationScenarioFlow',
    inputSchema: GenerateAnimationScenarioInputSchema,
    outputSchema: GenerateAnimationScenarioOutputSchema,
  },
  async (input) => {
    const qaPairsAsString = input.qaPairs.map((qa: QAPair, index: number) => 
      `${index + 1}. Soru: ${qa.question}\nAçıklama: ${qa.explanation}`
    ).join('\n');

    const promptInput = {
      ...input,
      qaPairs: qaPairsAsString,
    };

    const { output } = await prompt(promptInput as any); // Cast to any to bypass schema check for string
    if (!output || !output.frames) {
      throw new Error("Scenario generation did not produce valid frame data.");
    }
    
    const updatedFrames = output.frames.map((frame, index) => {
      const qaPair = input.qaPairs[index] as QAPair;
      if (qaPair) {
        return {
          ...frame,
          keyTopic: qaPair.explanation,
          // frameSummary is now generated by the LLM, so we use it directly.
          // We can add the question to the summary if needed, for example:
          // frameSummary: `${qaPair.question}\n\n${frame.frameSummary}`
        };
      }
      // Fallback for safety, though it shouldn't be reached
      return {
        ...frame,
        keyTopic: "Açıklama bulunamadı.",
        frameSummary: frame.frameSummary || "Özet bulunamadı.",
      };
    });

    return { frames: updatedFrames };
  }
);
